#include <cstdlib>
#include <iostream>
using namespace std;

void burbuja() {
	int numeros[] = { 5,2,1,3,4 };
	int aux;


	for (int i = 0; i < sizeof(numeros) / sizeof(*numeros); i++) {
		for (int j = 0; j < sizeof(numeros) / sizeof(*numeros); j++) {
			if (numeros[j] > numeros[j + 1]) {
				aux = numeros[j];
				numeros[j] = numeros[j + 1];
				numeros[j + 1] = aux;
			}
		}
	}

	for (int i = 0; i < sizeof(numeros) / sizeof(*numeros); i++) {
		cout << numeros[i] << " ";
	}
	cout << endl;
	for (int i = sizeof(numeros) / sizeof(*numeros) - 1; i >= 0; i--) {
		cout << numeros[i] << " ";
	}
}


void ordenado() {
	int numeros[] = { 60,70,4,80,50 };
	int aux, i, pos;

	for (i = 0; i < sizeof(numeros) / sizeof(*numeros); i++) {
		pos = i;
		aux = numeros[pos];
		while (pos > 0 && numeros[pos] < numeros[pos - 1]) {
			numeros[pos] = numeros[pos - 1];
			numeros[pos - 1] = aux;
			pos--;
		}
	}

	cout << "\nOrden ascendente: ";
	for (i = 0; i< sizeof(numeros) / sizeof(*numeros); i++) {
		cout << numeros[i] << " ";
	}

	cout << "\nOrden descendente: ";
	for (i = sizeof(numeros) / sizeof(*numeros) - 1; i >= 0; i--) {
		cout << numeros[i] << " ";
	}
}

void seleccion() {
	int numeros[] = { 287,2545,3432,7861,3765,6699,3061,5862,7527,345,7399,294,2381,1041,3927,9619,1329,4670,3984,3047,7245,8947,2467,8615,3005,2970,184,6696,583,1977,3925,871,4523,7357,8732,8289,4056,1792,4150,1582,2138,1549,1877,4519,2590,5805,4138,3920,474,8122,6968,7720,7068,9435,6335,72,2404,6519,6769,2988,8497,694,3859,3019,8051,2590,1308,2107,4383,5459,3689,6521,7008,5567,1040,9599,1372,5178,3518,1847,3299,485,9567,367,9921,5902,440,2324,2420,7209,5313,917,7904,9172,3937,5955,1762,5245,8062,6146,703,1751,2667,7711,7318,3707,7309,8691,8885,826,537,2184,1312,104,2552,1232,6006,2992,3557,8427,201,8870,9345,8105,8042,3281,4060,9805,8527,2121,5950,9230,3872,8617,6941,1190,2323,4249,9882,1208,5076,418,3393,6389,523,5946,7621,6530,8938,1178,4957,9140,48,4301,7245,8090,7583,1304,7894,6109,3426,3843,5338,7298,2460,2278,8489,4783,6528,8370,5992,1604,8789,9386,7993,9312,5331,5614,5842,4268,6792,798,3408,6840,5099,653,4930,2682,1957,2823,8791,5384,6667,4128,2681,9127,6407,1170,3910,2935,9540,9902,4539,8328,9287,2531,7640,4617,8145,3481,8886,4937,4279,2294,1777,9379,2947,6707,2060,4905,9531,851,288,6197,4980,2970,5324,1386,4140,9234,4321,3680,9136,8860,2008,8423,1391,9648,3040,9537,3129,1926,4473,7408,4221,6251,6787,7168,2957,8848,2073,2488,9699,2362,8685,4679,5333,4009,6065,9474,3243,386,3153,2379,9247,5161,802,637,4809,3842,173,7938,5769,4647,5346,9990,897,2133,7158,3855,980,9232,6343,679,1593,5028,5358,6926,9037,1423,6399,2280,1809,9553,4659,1055,4713,5461,1693,9523,9304,1867,7460,5073,6514,2805,5062,7412,4939,2220,1266,5919,1451,7610,6599,3044,2637,1957,9971,1674,3381,6369,3954,5191,5921,8614,6247,634,4074,7940,156,3378,9807,7617,8451,6321,422,3513,3732,5361,5733,4999,1280,7185,2609,7880,229,5246,9838,199,6921,3218,6569,875,8409,2490,9489,4655,3125,3563,2595,3282,6942,2401,898,5392,8723,1320,8906,2455,6682,4639,7454,7962,1823,62,5841,2053,5309,5678,2252,2230,8897,8822,3105,7305,1312,2594,1960,4437,6158,4555,7719,3099,6957,8617,8492,5679,9938,7397,8134,6619,2035,5588,4581,3859,5651,422,5912,960,6100,8165,3190,4997,6987,6296,2301,8299,8891,4261,2735,5048,8817,453,8147,5773,9071,6639,1451,9009,4035,9585,5627,6071,5173,208,9930,823,630,5842,1783,6731,4007,4974,1727,993,1269,4028,9292,159,8290,2027,5208,7106,2481,3355,2878,1551,9994,4330,559,4028,3915,6187,99,9088,6395,29,9912,7025,5871,1694,3755,9878,6669,5483,871,7938,9511,162,8098,7801,2190,3305,4907,4671,6660,7786,6222,6653,2115,6782,681,6031,2969,780,5118,9364,810,5029,6389,6681,6724,144,6559,3392,5627,7430,1330,5138,7593,9429,2939,9783,2733,7846,4454,9394,5631,675,6047,7747,7458,6729,3777,426,7510,8896,9791,8320,3924,6180,5001,648,6325,1559,4041,1951,8990,5371,7090,6583,4799,29,6366,7533,7875,819,6927,3506,1495,2973,1252,8953,9703,5029,9380,7212,3924,9170,5531,7849,5350,531,8498,1674,2091,2538,3626,1081,7910,716,7664,2709,745,4029,241,8620,4848,7168,2126,6343,141,3378,5296,9844,8408,4675,7055,2332,3845,2586,181,9195,3118,8679,869,5210,1217,4495,6291,9127,5211,3955,1835,5956,7984,2077,4576,2832,9245,6702,9176,9387,80,4471,9230,8488,9147,6285,819,2991,8872,1000,2186,1990,9680,3056,7200,896,7551,3491,23,2762,7446,1858,8719,5430,3935,3295,8262,3180,9998,7437,2567,77,1908,1796,8566,1054,8082,9385,4046,6954,385,6233,8944,65,9289,6144,961,6840,9635,984,9603,7081,2843,8321,2510,6778,1616,771,9959,1613,8209,2525,1690,116,4322,255,1171,2404,9641,5218,9358,26,1450,8302,91,739,4446,1052,7579,4081,2037,7181,1161,4880,5502,3672,1658,7118,4443,1616,8732,2652,4142,421,2769,8465,677,3940,868,317,9158,226,344,608,8529,435,1347,2974,1488,8927,7055,3525,6108,8217,8405,1610,1888,62,8728,6332,1679,7459,8985,5822,7881,1753,4286,8558,5694,5155,8876,4852,5381,9221,5460,3910,9656,6808,6885,1143,5734,3939,4668,1842,2156,3073,3452,4045,3136,2179,376,4816,9639,9362,637,7520,1114,4924,6078,6808,78,4954,1659,5460,4174,7120,9371,3829,3927,6255,4973,9661,194,9642,1502,2350,2714,4955,6395,5851,7135,6772,666,6773,6133,1304,4293,7248,6228,370,4056,6307,5324,5716,1766,9499,2835,1136,3327,6762,7392,8301,6423,7586,7942,7926,9936,655,2881,6331,6507,15,3103,7173,6789,9237,8477,1081,6485,4705,1451,540,1011,6776,6256,2778,6275,9092,3915,9602,5854,1306,7903,2277,8892,5844,203,8828,6500,3084,5158,3006,3099,8262,178,9888,7498,8656,968,3982,3360,2420,4523,4371,9197,779,7150,5471,9871,1064,5073,5725,2370,2975,8002,1261,8819,8205,88,5319,1289,5247,8325,4388,3509,8504,4276,1006,7159,5244,4989,518,7665,9513,4890,6862,291,2039,2332,162,3104,7406,5887,5474,381,3888,6736,9201,2093,6825,4519,3382,2072,2843,7771,5581,1346,2046,6587,8505,7291,1576,9024,4955,1088,3914,1817,1380,5954,4150,1542,9058,1555,7429,4531,1936,1317,1267,1136,3410,8092,5656,6793,163,8499,4563,5744,9846,6609,2331,8351,3900,3908,7374,8855,4997,1288,672,6377,7242,4822,7919,6299,6378,5348,829,8314,6665,2097,9451,75,188,5107,6868,352,3605,1431,6096,3451,8041,8428,1801,1940,2335,9176,795,7332,463,1467,3709,7706,6289,1627,4004,2666,69 };
	int aux, i, j, max, pos;

	for (i = 0; i < sizeof(numeros) / sizeof(*numeros); i++) {
		max = 0;
		for (j = i; j < sizeof(numeros) / sizeof(*numeros); j++) {
			if (numeros[j] >= max) {
				max = numeros[j];
				pos = j;
			}
		}
		aux = numeros[pos];
		numeros[pos] = numeros[i];
		numeros[i] = aux;
	}

	cout << "\nOrden descendente: ";
	for (i = 0; i< sizeof(numeros) / sizeof(*numeros); i++) {
		cout << numeros[i] << " ";
	}

	cout << "\nOrden ascendente: ";
	for (i = sizeof(numeros) / sizeof(*numeros) - 1; i >= 0; i--) {
		cout << numeros[i] << " ";
	}
}

int main(int argc, char** argv) {
	seleccion();
	//ordenado();
	//burbuja();

	system("pause");
	return 0;
}

